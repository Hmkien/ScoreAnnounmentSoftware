// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoreAnnouncementSoftware.Data;

#nullable disable

namespace ScoreAnnouncementSoftware.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240924035956_InitialDataa")]
    partial class InitialDataa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ConvertForm", b =>
                {
                    b.Property<int>("ConvertFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificateType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fileDocx")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConvertFormId");

                    b.ToTable("ConvertForms");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatePerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamTypeId")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("ExamId");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ExamType", b =>
                {
                    b.Property<string>("ExamTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamType");

                    b.HasData(
                        new
                        {
                            ExamTypeId = "0",
                            ExamTypeName = "Chuẩn đầu ra tiếng Anh"
                        },
                        new
                        {
                            ExamTypeId = "1",
                            ExamTypeName = "Tiếng anh tăng cường"
                        },
                        new
                        {
                            ExamTypeId = "2",
                            ExamTypeName = "Chuẩn đầu ra tin học cơ bản"
                        });
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ITStudent", b =>
                {
                    b.Property<Guid>("ITStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentificationCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ITStudentId");

                    b.HasIndex("StudentCode");

                    b.ToTable("ITStudent");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.RequireForm", b =>
                {
                    b.Property<int>("RequireFormCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileDocx")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudenCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StudentCode")
                        .HasColumnType("TEXT");

                    b.HasKey("RequireFormCode");

                    b.HasIndex("StudentCode");

                    b.ToTable("RequireForms");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ScoreFL", b =>
                {
                    b.Property<int>("ScoreFLCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListeningScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadingScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeakingScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WritingScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScoreFLCode");

                    b.ToTable("ScoreFL");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ScoreIT", b =>
                {
                    b.Property<int>("ScoreITCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PracticalScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("TheoryScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalScore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScoreITCode");

                    b.ToTable("ScoreIT");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.Student", b =>
                {
                    b.Property<string>("StudentCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Note")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentCode");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.StudentExam", b =>
                {
                    b.Property<Guid>("StudentExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentExamId");

                    b.HasIndex("StudentCode");

                    b.ToTable("StudentExam");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.Exam", b =>
                {
                    b.HasOne("ScoreAnnouncementSoftware.Models.Entities.ExamType", "ExamType")
                        .WithMany("Exam")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ExamType");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ITStudent", b =>
                {
                    b.HasOne("ScoreAnnouncementSoftware.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.RequireForm", b =>
                {
                    b.HasOne("ScoreAnnouncementSoftware.Models.Entities.StudentExam", "StudentExam")
                        .WithMany()
                        .HasForeignKey("StudentCode");

                    b.Navigation("StudentExam");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.StudentExam", b =>
                {
                    b.HasOne("ScoreAnnouncementSoftware.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreAnnouncementSoftware.Models.Entities.ExamType", b =>
                {
                    b.Navigation("Exam");
                });
#pragma warning restore 612, 618
        }
    }
}
